1. Container        2
1.1 Use of Container        2
1.2 Benefits of Container        2
2. Containerization vs Virtualization        3
2.1 Containerization        3
2.2 Virtualization        4
2.3 Why do we need Container if there is already Virtualization?        5
3. Docker        6
3.1 Why        6
3.2 How it works        6
3.3 Benefits        6
4. Installation        6
5. Architecture        6
6. Components        6
6.1 Dockerfile        6
6.2 Images        6
6.3 Container        6
7. Demo Application        6
8. Docker Commands        6
9. Push Images to the Registry        6
10. Docker Networking        6
11. Docker Volume and Compose        6
12. Container Orchestration        6
12.1 Docker Swarm        6
























1. Container
Containerization is the packaging of software code with all its necessary components like libraries, frameworks, and other dependencies so that they are isolated in their container. A Container is an isolated environment for running an application. The Docker container platform always runs on top of the host operating system.
Containers are containing the binaries, libraries, and the application itself. Containers do not contain a guest operating system which ensures that containers are lightweight.
1.1 Use of Container
Containers are an alternative to coding on one platform or operating system, which made moving their application difficult since the code might not then be compatible with the new environment. This could result in bugs, errors, and glitches that needed fixing (meaning more time, less productivity, and a lot of frustration).
Packaging up an application in a container that can be moved across platforms and infrastructures can be used wherever you move it because it has everything it needs to run successfully within it.
1.2 Benefits of Container
* Portability
* Efficiency
* Agility
* Faster delivery
* Improved security
* Faster app startup
* Easier management
* Flexibility


2. Containerization vs Virtualization
Virtualization and containerization are the two most frequently used mechanisms to host applications in a computer system. Virtualization uses the notion of a virtual machine as the fundamental unit. Containerization uses the concept of a container. Both of these technologies play a crucial role and have their merits and demerits.
2.1 Containerization
Containerization is a lightweight alternative to virtualization. This involves encapsulating an application in a container with its operating environment. Thus, instead of installing an OS for each virtual machine, containers use the host OS.
Benefits:
* The container allows running multiple OS in isolation
* Containers are lightweight
* It starts quickly
* It needs fewer hardware resources
  

2.2 Virtualization
Virtualization helps us to create software-based or virtual versions of a computer resource. These computer resources can include computing devices, storage, networks, servers, or even applications.
It allows organizations to partition a single physical computer or server into several virtual machines (VM). Each VM can then interact independently and run different operating systems or applications while sharing the resources of a single computer.
Hypervisor software facilitates virtualization. A hypervisor sits on top of an operating system. Hypervisors take physical resources and divide them up so that virtual environments can use them.
Benefits:
* Run the application in isolation
* Application has the exact dependencies that it needs
  

2.3 Why do we need Container if there is already Virtualization?
Containers can run directly in a container engine instead of on a guest operating system managed by a hypervisor. This makes them portable, lightweight, and easily scalable. These attributes make containers perfect for microservices and cloud applications that need to scale quickly or across multiple environments.
Virtualization means each virtual machine has its hypervisor. In containerization, Docker is used to deploying an individual container. Containers are lightweight and fast to deploy. Compared to virtualization, where each instance may be gigabytes (GB) in size, containers can be mere megabytes (MB) in size.
Dependencies, libraries, binaries, and configuration files being bundled together, containers can be redeployed as needed to any platform or environment.
The lightweight nature of containers can lead to meaningful operational and developmental cost reductions.
Easy to scale with speed and small size in Containerization. But in virtualization, Supports some scaling but will reach compute resource limits quickly.














3. Docker


3.1 Why
        3.2 How it works
        3.3 Benefits
4. Installation
5. Architecture
6. Components
6.1 Dockerfile
        6.2 Images
        6.3 Container
7. Demo Application
8. Docker Commands
9. Push Images to the Registry
10. Docker Networking
11. Docker Volume and Compose
12. Container Orchestration
        12.1 Docker Swarm