

Event-driven architecture (EDA) is a software design pattern in which decoupled applications can asynchronously publish and subscribe to events via an event broker/message broker.Event-driven App can be created in any kind of  programming language , it is a programming approach , not a programming language.
Event-Driven Architecture, applications communicate with each other by sending and/or receiving events or messages.

kafka cluster
-------------
kafka is a distributed system,it is act like a cluster.A kafka cluster consists of a set of brokers.A cluster has minimum 3 brokers.

Brokers
--------
the broker is a Kafka server.it just give the meaningfull name to kafka server.And this name make sense as well as all the kafka does it act as a message broker in between producer & consumer.they not interact directly. they use as a broker to exchange the messages.

producers
-----------
Producers are entity that publish the message to kafka topics.they write the message to the specfic topics and the messages are appended with appropriate partitions.

consumers
----------
Consumers are entity that subscribe to kafka topics and read the message from them.they read the messages from them.they read the message from the pull-based manner, specfiy the topics & partition from which they want to consume .each consumer message keep on tracking , progress in reading messages by maintaining an offset,indicate the last reading message in each partition.

Topics
-------
topic is a category or feed name to which messages are published.it represent particular stream of data.
we will send java Object as a JSON byte[] to kafka topic using JsonSerializer. as receiving JSON byte[] automatically convert to java Object using JsonDeserializer.

Partitions
-----------
  A topic is divided into one or more partitions.each partitions had in ordered,immutable sequence of message. partitions allow kafka to parallelize data storage & processing.they scalable and fault tolerance of kafka distributing the load across multiple brokers.

Kafka topic divided into a number of partitions,which contain records in an unchangeable sequence. kafka broker store the message for a topic. But the capacity of data can be huge & may not possible to store in single computer.therefore it will partitions into multiple parta & distributed among multiple computers, since kafka is a distributed system.

offsets
--------
Offsets are numeric identifiers that kafka assigns to each message within a partition.they repersent the position of the message within the partition's sequence.consumers use the offsets to keep tracking of their progress and can rewind or skip to a specific offset for message retrieval.

offset is a sequence of id's given message when arrive to a partition. once offset is assigned it never to be changed. the first message gets on an zero & next message receives an offset one & so on so.

consumers groups
----------------
Consumer groups allow parallel consumption of messages from a topic. Consumers within a group divide the partitions of a topic among themselves, ensuring that each partition is consumed by only one consumer within the group. This enables horizontal scaling of consumer applications.

A comsumer group contains one & more consumers working together to process the messages.

Replication
-----------
Each partition can have multiple replicas, where one replica acts as the leader and others act as followers. The leader handles read and write requests, while followers replicate the leader's data and serve as backups. If a leader fails, one of the followers is automatically elected as the new leader.

 hierarchy arch
		1.Cluster
               		 2.Brokers
				3.Topics
				       4.Partitions
						  5.OffSets
							 6.Messages/Events
features
---------
Performance , durability,Zero Downtime,Replication,extensibility,
scalablity,Reliablity,High volume,Data transformations.

fault tolerance:- Fault tolerance refers to the ability of a system or component to continue functioning properly and providing its intended services even in the presence of failures or errors.


Advantages
-------------
Improve the flexibility and Maintainability:- 

high scalability:- if you need to add one more microservices (customer) consume it, that don't care about Producer. 

improved Availablity:- if any problem in one microservice , it not affect any other microservices.
========================================================================================================

creating topics
---------------
.\bin\windows\kafka-topics.bat --create --topic NewTopics --bootstrap-server localhost:9092

list of topics
---------------
.\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list


run zookeeper & kafka
---------------------
.\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties
.\bin\windows\kafka-server-start.bat .\config\server.properties

send message via console
------------------------
.\bin\windows\kafka-console-producer.bat --bootstrap-server=localhost:9092 --topic test
.\bin\windows\kafka-console-consumer.bat --bootstrap-server=localhost:9092 --topic test

need to see all message from the beginning
---------------------------------------------
.\bin\windows\kafka-console-consumer.bat --bootstrap-server=localhost:9092 --topic demoTopic --from-beginning

office Automation
------------------
notepad ./drivers/etc/hosts



=================================================================Projects (obsev & sustanbility)=========================================================================================

oc login -u balasubramanian -p Bala@2509$ --server https://api.zagaopenshift.zagaopensource.com:6443

oc project kafka-workspace

oc extract secret/observai-kafka-cluster-cluster-ca-cert --keys=ca.crt --to=- > observai-kafka-cluster.crt

keytool -import -trustcacerts -alias root -file observai-kafka-cluster.crt -keystore observai-kafka-cluster.jks -storepass password -noprompt


bin\windows\kafka-console-consumer.bat --bootstrap-server observai-kafka-cluster-kafka-external-bootstrap-kafka-workspace.apps.zagaopenshift.zagaopensource.com:443 --consumer-property security.protocol=SSL --consumer-property ssl.truststore.password=password --consumer-property ssl.truststore.location=./observai-kafka-cluster.jks --topic observai-main-metrics-1
