
core java ==> java 1 SE

java Enterprize edition:  webApp / API's

Enterprise javaBean

port :- ftp , http , https 

Spring => is integrate with other frameworks like hibernate framework (Red Hat - lunix org) => DB related task , struts framwork => 


spring framework=> enterprise application / programing and configuration model for java enterprise application.

spring feature => POJO class ( Plain Old Object Model) ,dependence injection ,Rest API's supports ,MVC design or Arch pattern(Model View Controller),able to create secured application.

spring boot( spring boot is opinionated/ is standalone/ is prduction grade)

spring boot => it makes a easy setup's for your production based application./opinionated view of the platform./ configuration 

configuration ==> needed the external jar files.( one jar is interrelated with another jar files ,so that kind of intgration work springboot will do)
			 Bill Of Materials (manage the vresions of jars)


design patterns ==>giving particular idea , not a implementation

singleton pattern , dependence injection , etc....

Dependence Injection
--------------------

types :- setter-based dependency injection , Constructor-based dependency injection

Annotation (annotation are interface)
-----------
In summary, annotations provide metadata and additional information about code elements, while classes define the structure and behavior of objects in a Java program.

differents between Annotation and normal class
-----------------------------------------------
The main difference between annotations and classes is that annotations provide additional information about the code elements to which they are applied, while classes define the structure and behavior of objects in a Java program. Annotations do not contain any executable code, while classes contain executable code and can be used to create objects.

@Controller  => its responsable for the http request 

@ResponseBody  => it give the response to client

@RestController   => @Controller + @ResponseBody

@Component => (@Component, @Controller, @Service, and @Repository)

@Qualifier => giving the name for the component.	{example:- @Component("bala")  @Qualifier("bala")}

@Autowired => connecting in between 2 components.

@SpringBootApplication  =>(@Configuration,@EnableAutoConfiguration,@ComponentScan)

@RestController  =>

@RequestMapping  => 

@GetMapping("   ") =>

@PathVariable      =>

@RequestParam   => 

SpringApplication.run() => starts the Spring application Context , setup the default configuration , start & stop the Tomcat Server, class path scan.

singleton pattern
==================

this design pattern restrict the object to single object and provide the way to access the object globally.

to avoid concurrent issues.

reduce the memory usage.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Spring boot using  MVC to connect DB

default in springboot H2 DataBase:

JPA-> Java presistence API
developers can use JPA to interact with databases using Java objects.
This makes it easier to manage database interactions and reduces the amount of code that developers need to write.


java<-----------------JPA api------------>database

when return from the DataBase it should be in model object


------------------------------------------------------------------------------------------------------------------------------

REST API'S

what is api (Application Programming Interface) => example for API'S facebook , twitter , instagram icons used in other webpages


---------------------------------------------------------------------------------------
B2 Channels topics
------------------
1. creating SpringBoot project
2. creating controller.
3. Add Dependences.
4. Path variables.
5. Request Param.
6. orginse API's in postman.
7. Map the JSON data to Java Object.
8. Reading the properties by using @Value.
9. HTTP put methods.
10.changing the server port in the application.properties.
11.creating excutable the jar.
12.@JsonIgnore and @JsonProperty
13.create a service.
14.change the base URL.
15.create DataBase and Table.
16.Configure datasource.
17.create a entity class.
18.fetch the record from the Database.
19.save the record to the databse.
20.get the single record by id.
21.Delete record from dataBase.
22.Update the records.
23.create the database tables by jpa.
24.create timestamps by jpa.----------------------------------------------------
25.@Column annotation is mandatory.
26.Add validation to REST API.---------------------------------------------------
27.customise the validation message.-------------------------------------------
28.@NotNull,@NotBlank,@NotEmpty-------------------------------------------------
29.change the HTTP status code.--------------------------------------------------
30.JPA Query method or Finder method.[part-1]---fetch the employees data by name field.
31.JPA Query method or Finder method.[part-2]---fetch the employees data by name and location field.
32.JPA Query method or Finder method.[part-3]---fetch the employees data by keyword.
33.Data JPA Pagination.
34.Data JPA Sorting.
35.Data JPA Pagination and Sorting.
36.JPQL Select Query in Data JPA.
37.JPQL Delete Query in Data JPA.
38.One to One mapping in Data JPA.
39.join Query in Data JPA.
40.JPQL join Query in Data JPA.
41.One to Many mapping in Data JPA.
42.One to One Bi-directional in Data JPA.
43.One to Many Bi-directional in Data JPA.
44.JPA Native SQL Query.
45.@NamedNativeQuery annotation.
46.@NamedQuery annotation.
47.Documents API'S using Swaggar.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
change the port "server.port=8090"

disable the embedded server "spring.main.web-application-type=none"

how to disable a particular class in "@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class,args})"

@Configuration identify that Bean for that particular spring dependence injection.

@EnableAutoConfiguration helps to AutoScan,AutoScan means particular Beans is avialable in your classpath and added to your set of dependences.

@ComponentScan where you scan the component or Beans.

this the way to application.properties file into java class

@value("${custom.value}) 
Private String customVal;

@RestController 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Preparing for a Spring Boot interview 
=====================================
Review Core Java Concepts:

Spring Framework Fundamentals:

Spring Boot Basics:

Spring Boot Project Structure:

Spring Boot Annotations:

Spring Boot Data Access:

RESTful Web Services:

Spring Boot Testing:

Spring Boot Security:

Spring Boot Microservices:

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q1. What Is Spring Boot and What Are Its Main Features?
   Auto-Configuration,Standalone Executable JARs,Opinionated Defaults ,Embedded Servers,Production-Ready Features,Easy Dependency Management

Q2. What Are the Differences Between Spring and Spring Boot?
Q3. How Can We Set Up a Spring Boot Application With Maven?
     create a maven project , add dependency in pom.xml file ,create a springBoot main class, bulid & run the springboot.

Q4. What Is Spring Initializr?
Q5. What Spring Boot Starters Are Available Out There?
Q6. How to Disable a Specific Auto-Configuration?
Q7. How to Register a Custom Auto-Configuration?
Q8. How to Tell an Auto-Configuration to Back Away When a Bean Exists?
Q9. How to Deploy Spring Boot Web Applications as Jar and War Files?
Q10. How to Use Spring Boot for Command-Line Applications?
Q11. What Are Possible Sources of External Configuration?
     Properties Files,Environment Variables,Command-Line Arguments,Configuration Servers,Profile-Specific Configuration

Q12. What Does It Mean That Spring Boot Supports Relaxed Binding?
Q13. What Is Spring Boot DevTools Used For?
Q14. How to Write Integration Tests?
Q15. What Is Spring Boot Actuator Used For?
Q16. Which Is Better to Configure a Spring Boot Project â€” Properties or YAML?
Q17. What Basic Annotations Does Spring Boot Offer?
Q18. How to Change the Default Port in Spring Boot?
Q19. Which Embedded Servers Does Spring Boot Support, and How to Change the Default?
Q20. Why Do We Need Spring Profiles?
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.marcobehler.com/guides/spring-boot-interview-questions
1. Is the following statement true or false: "Every Spring Boot application is a web application running within an embedded Apache Tomcat". Give reasons for your answer.

2. What is the difference between Spring Boot and Spring MVC? Or between Spring Boot and Spring Framework? Can you use them together in the same project?

3. Name two ways to create a new Spring Boot project from scratch? Also, how do you know what spring-boot-starters your project needs?

4. Why do you not need to specify dependency versions in your pom.xml file when including 3rd party libraries? Does that hold true for all 3rd party libraries or only some? How can you find out what libraries Spring Boot supports?

5. You want to make your application configurable, say specify a different database connection for development and production environments. What are your options?

6. Is the following statement true or false: "Every Spring Boot project must use Thymeleaf as an HTML templating engine". What are your options when it comes to rendering HTML?

7. How can you implement relational database access with Spring Boot? What are your options?

8. You need to configure logging in your application but you want to differentiate between the log levels on your machine and the log levels on different environments (qa, test, prod). What options do you have?

9. What is the easiest way to deploy a Spring Boot application in production? What other options are there?

10. Youâ€™ve been told to enable "Spring Security" on your application. What happens when you add the Spring Security starter to your application?

11. How would you find out which auto-configurations Spring Boot applied on startup and which conditions it evaluated?

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What do you understand by the shutdown in the actuator?

2. How and where can you define properties in Spring Boot? 

3. Describe spring-boot-starter-parent?

4. What is Spring Boot dependency management?

5. Can you disable particular auto-configuration in spring boot? Explain how?

6. Can Spring Boot also be used to create non-web applications?

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.upgrad.com/blog/spring-boot-interview-questions-and-answers-beginners-experienced/

1. How can you check the environment properties in a Spring Boot application?

2. What do we mean by an IOC container?

3. Can you please explain Spring Boot Dependency Management?

4. How can you create a login page in Spring Boot?

5. What is the procedure for creating a non-web application in Spring Boot?

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------































