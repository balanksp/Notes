kill the port 
-------------
netstat -ano | findstr :8080
taskkill /PID <PID> /F

core java ==> java 1 SE

java Enterprize edition:  webApp / API's

Enterprise javaBean

port :- ftp , http , https 

Spring => is integrate with other frameworks like hibernate framework (Red Hat - lunix org) => DB related task , struts framwork => 


spring framework=> enterprise application / programing and configuration model for java enterprise application.

spring feature => POJO class ( Plain Old Object Model) ,dependence injection ,Rest API's supports ,MVC design or Arch pattern(Model View Controller),able to create secured application.

spring boot( spring boot is opinionated/ is standalone/ is prduction grade)

spring boot => it makes a easy setup's for your production based application./opinionated view of the platform./ configuration 

configuration ==> needed the external jar files.( one jar is interrelated with another jar files ,so that kind of intgration work springboot will do)
			 Bill Of Materials (manage the vresions of jars)


design patterns ==>giving particular idea , not a implementation

singleton pattern , dependence injection , etc....

Dependence Injection
--------------------

types :- setter-based dependency injection , Constructor-based dependency injection

Annotation (annotation are interface)
-----------
In summary, annotations provide metadata and additional information about code elements, while classes define the structure and behavior of objects in a Java program.

differents between Annotation and normal class
-----------------------------------------------
The main difference between annotations and classes is that annotations provide additional information about the code elements to which they are applied, while classes define the structure and behavior of objects in a Java program. Annotations do not contain any executable code, while classes contain executable code and can be used to create objects.

@Controller  => its responsable for the http request 

@ResponseBody  => it give the response to client

@RestController   => @Controller + @ResponseBody

@Component => (@Component, @Controller, @Service, and @Repository)

@Qualifier => giving the name for the component.{example:- @Component("bala")  @Qualifier("bala")}

@Autowired => connecting in between 2 components.

@SpringBootApplication  =>(@Configuration,@EnableAutoConfiguration,@ComponentScan)

@RestController  =>

@RequestMapping  => 

@GetMapping("   ") =>

@PathVariable      =>

@RequestParam   => 

SpringApplication.run() => starts the Spring application Context , setup the default configuration , start & stop the Tomcat Server, class path scan.

singleton pattern
==================

this design pattern restrict the object to single object and
provide the way to access the object globally.

to avoid concurrent issues.

reduce the memory usage.


--------------------------------------------------------------------
Spring boot using  MVC to connect DB

default in springboot H2 DataBase:

JPA-> Java presistence API
developers can use JPA to interact with databases using Java objects.
This makes it easier to manage database interactions and reduces the amount of code that developers need to write.


java<-----------------JPA api------------>database

when return from the DataBase it should be in model object


------------------------------------------------------------------------------------------------------------------------------

REST API'S

what is api (Application Programming Interface) => example for API'S facebook , twitter , instagram icons used in other webpages


---------------------------------------------------------------------------------------
B2 Channels topics
------------------
1. creating SpringBoot project
2. creating controller.
3. Add Dependences.
4. Path variables.
5. Request Param.
6. orginse API's in postman.
7. Map the JSON data to Java Object.
8. Reading the properties by using @Value.
9. HTTP put methods.
10.changing the server port in the application.properties.
11.creating excutable the jar.
12.@JsonIgnore and @JsonProperty
13.create a service.
14.change the base URL.
15.create DataBase and Table.
16.Configure datasource.
17.create a entity class.
18.fetch the record from the Database.
19.save the record to the databse.
20.get the single record by id.
21.Delete record from dataBase.
22.Update the records.
23.create the database tables by jpa.
24.create timestamps by jpa.----------------------------------------------------
25.@Column annotation is mandatory.
26.Add validation to REST API.---------------------------------------------------
27.customise the validation message.-------------------------------------------
28.@NotNull,@NotBlank,@NotEmpty-------------------------------------------------
29.change the HTTP status code.--------------------------------------------------
30.JPA Query method or Finder method.[part-1]---fetch the employees data by name field.
31.JPA Query method or Finder method.[part-2]---fetch the employees data by name and location field.
32.JPA Query method or Finder method.[part-3]---fetch the employees data by keyword.
33.Data JPA Pagination.
34.Data JPA Sorting.
35.Data JPA Pagination and Sorting.
36.JPQL Select Query in Data JPA.
37.JPQL Delete Query in Data JPA.
38.One to One mapping in Data JPA.
39.join Query in Data JPA.
40.JPQL join Query in Data JPA.
41.One to Many mapping in Data JPA.
42.One to One Bi-directional in Data JPA.
43.One to Many Bi-directional in Data JPA.
44.JPA Native SQL Query.
45.@NamedNativeQuery annotation.
46.@NamedQuery annotation.
47.Documents API'S using Swaggar.



---------------------------------------------------------------------------------------------------
change the port "server.port=8090"

disable the embedded server "spring.main.web-application-type=none"

how to disable a particular class in "@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class,args})"

@Configuration identify that Bean for that particular spring dependence injection.

@EnableAutoConfiguration helps to AutoScan,AutoScan means particular Beans is avialable in your classpath and added to your set of dependences.

@ComponentScan where you scan the component or Beans.

this the way to application.properties file into java class

@value("${custom.value}) 
Private String customVal;

@RestController 































